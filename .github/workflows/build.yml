name: Build All

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        host:
          [
            {
              os-cfg: linux_x86_64,
              runner: ubuntu-latest,
              docker: true,
              docker-img: 16.04,
            },
            {
              os-cfg: windows_i686,
              runner: ubuntu-latest,
              docker: true,
              docker-img: 20.04,
            },
            {
              os-cfg: windows_x86_64,
              runner: ubuntu-latest,
              docker: true,
              docker-img: 20.04,
            },
            {
              os-cfg: windows_arm64,
              runner: ubuntu-latest,
              docker: true,
              docker-img: 20.04,
            },
            {
              os-cfg: macos_x86_64,
              runner: macos-latest,
              docker: false,
              docker-img: "",
            },
            {
              os-cfg: macos_arm64,
              runner: macos-latest,
              docker: false,
              docker-img: "",
            }
          ]
    name: Build ${{ matrix.host.os-cfg }}
    runs-on: ${{ matrix.host.runner }}
    steps:
      - uses: actions/checkout@v2
      - name: Prep MacOS
        if: startsWith(matrix.host.runner, 'macos')
        run: brew install coreutils binutils gnu-tar gzip ninja
      - name: Import Developer ID Certificate
        uses: wpilibsuite/import-signing-certificate@v1
        with:
          certificate-data: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        if: github.repository_owner == 'wpilibsuite' && startsWith(matrix.host.runner, 'macos')
      - name: Build on docker
        if: ${{ matrix.host.docker }}
        run: ./build-docker.sh ${{matrix.host.docker-img}} hosts/${{matrix.host.os-cfg}}.env
      - name: Build on native
        if: startsWith(matrix.host.runner, 'macos')
        run: ./build.sh hosts/${{matrix.host.os-cfg}}.env
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.host.os-cfg}}
          path: build/*/*/*-Toolchain-*.*
